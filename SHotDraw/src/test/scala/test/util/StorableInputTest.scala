/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	ï¿½ by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package test.util

import java.io.File
import java.io.FileInputStream
import org.shotdraw.util.StorableInput
import junit.framework.TestCase

// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase StorableInputTest is generated by
 * JUnitDoclet to hold the tests for StorableInput.
 * @see org.shotdraw.util.StorableInput
 */
class StorableInputTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: StorableInput = {
    val tempFile = File.createTempFile("StorableInputTest", "dat")
    val stream = new FileInputStream(tempFile)
    tempFile.deleteOnExit
    new StorableInput(stream)
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp() {
    super.setUp
    storableinput = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown() {
    storableinput = null
    super.tearDown
  }

  /**
   * Method testReadStorable is testing readStorable
   * @see org.shotdraw.util.StorableInput#readStorable()
   */
  def testReadStorable() {
  }

  /**
   * Method testReadString is testing readString
   * @see org.shotdraw.util.StorableInput#readString()
   */
  def testReadString() {
  }

  /**
   * Method testReadInt is testing readInt
   * @see org.shotdraw.util.StorableInput#readInt()
   */
  def testReadInt() {
  }

  /**
   * Method testReadLong is testing readLong
   * @see org.shotdraw.util.StorableInput#readLong()
   */
  def testReadLong() {
  }

  /**
   * Method testReadColor is testing readColor
   * @see org.shotdraw.util.StorableInput#readColor()
   */
  def testReadColor() {
  }

  /**
   * Method testReadDouble is testing readDouble
   * @see org.shotdraw.util.StorableInput#readDouble()
   */
  def testReadDouble() {
  }

  /**
   * Method testReadBoolean is testing readBoolean
   * @see org.shotdraw.util.StorableInput#readBoolean()
   */
  def testReadBoolean() {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault() {
  }

  private var storableinput: StorableInput = null
}

