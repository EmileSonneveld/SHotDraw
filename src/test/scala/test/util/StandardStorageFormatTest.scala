/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	� by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package test.util

// JUnitDoclet begin import

import org.shotdraw.util.StandardStorageFormat
import junit.framework.TestCase
import javax.swing.filechooser.FileFilter

// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase StandardStorageFormatTest is generated by
 * JUnitDoclet to hold the tests for StandardStorageFormat.
 * @see org.shotdraw.util.StandardStorageFormat
 */
class StandardStorageFormatTest(name: String) extends TestCase(name) {


  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: StandardStorageFormat = {
    new StandardStorageFormat
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp() {
    super.setUp
    standardstorageformat = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown() {
    standardstorageformat = null
    super.tearDown
  }

  /**
   * Method testSetGetFileExtension is testing setFileExtension
   * and getFileExtension together by setting some value
   * and verifying it by reading.
   * @see org.shotdraw.util.StandardStorageFormat#setFileExtension(java.lang.String)
   * @see org.shotdraw.util.StandardStorageFormat#getFileExtension()
   */
  def testSetGetFileExtension() {
    val tests = List("", " ", "a", "A", "�", "�", "0123456789", "012345678901234567890", "\n", null)
    
    tests foreach { e =>
      standardstorageformat.setFileExtension(e)
      assert(e == standardstorageformat.getFileExtension)
    }
  }

  /**
   * Method testCreateFileDescription is testing createFileDescription
   * @see org.shotdraw.util.StandardStorageFormat#createFileDescription()
   */
  def testCreateFileDescription() {
  }

  /**
   * Method testSetGetFileDescription is testing setFileDescription
   * and getFileDescription together by setting some value
   * and verifying it by reading.
   * @see org.shotdraw.util.StandardStorageFormat#setFileDescription(java.lang.String)
   * @see org.shotdraw.util.StandardStorageFormat#getFileDescription()
   */
  def testSetGetFileDescription() {
    val tests = List("", " ", "a", "A", "�", "�", "0123456789", "012345678901234567890", "\n", null)
    
    tests foreach {e =>
          standardstorageformat.setFileDescription(e)
          assert(e == standardstorageformat.getFileDescription)     
    }
  }

  /**
   * Method testSetGetFileFilter is testing setFileFilter
   * and getFileFilter together by setting some value
   * and verifying it by reading.
   * @see org.shotdraw.util.StandardStorageFormat#setFileFilter(javax.swing.filechooser.FileFilter)
   * @see org.shotdraw.util.StandardStorageFormat#getFileFilter()
   */
  def testSetGetFileFilter() {
    val tests = List(null, null)
    tests foreach { e =>
      standardstorageformat.setFileFilter(e)
      assert(e == standardstorageformat.getFileFilter)
    }
  }

  /**
   * Method testStore is testing store
   * @see org.shotdraw.util.StandardStorageFormat#store(java.lang.String, org.shotdraw.framework.Drawing)
   */
  def testStore() {
  }

  /**
   * Method testRestore is testing restore
   * @see org.shotdraw.util.StandardStorageFormat#restore(java.lang.String)
   */
  def testRestore() {
  }

  /**
   * Method testEquals is testing equals
   * @see org.shotdraw.util.StandardStorageFormat#equals(java.lang.Object)
   */
  def testEquals() {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault() {
  }

  private var standardstorageformat: StandardStorageFormat = null
}

