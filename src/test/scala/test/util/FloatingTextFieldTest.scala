/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	ï¿½ by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package test.util

import org.shotdraw.util.FloatingTextField
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase FloatingTextFieldTest is generated by
 * JUnitDoclet to hold the tests for FloatingTextField.
 * @see org.shotdraw.util.FloatingTextField
 */
class FloatingTextFieldTest(name: String) extends TestCase(name) {


  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: FloatingTextField = {
    new FloatingTextField
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp() {
    super.setUp
    floatingtextfield = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown() {
    floatingtextfield = null
    super.tearDown
  }

  /**
   * Method testCreateOverlay is testing createOverlay
   * @see org.shotdraw.util.FloatingTextField#createOverlay(java.awt.Container)
   */
  def testCreateOverlay() {
  }

  /**
   * Method testAddActionListener is testing addActionListener
   * @see org.shotdraw.util.FloatingTextField#addActionListener(java.awt.event.ActionListener)
   */
  def testAddActionListener() {
  }

  /**
   * Method testRemoveActionListener is testing removeActionListener
   * @see org.shotdraw.util.FloatingTextField#removeActionListener(java.awt.event.ActionListener)
   */
  def testRemoveActionListener() {
  }

  /**
   * Method testSetBounds is testing setBounds
   * @see org.shotdraw.util.FloatingTextField#setBounds(java.awt.Rectangle, java.lang.String)
   */
  def testSetBounds() {
  }

  /**
   * Method testGetText is testing getText
   * @see org.shotdraw.util.FloatingTextField#getText()
   */
  def testGetText() {
  }

  /**
   * Method testGetPreferredSize is testing getPreferredSize
   * @see org.shotdraw.util.FloatingTextField#getPreferredSize(int)
   */
  def testGetPreferredSize() {
  }

  /**
   * Method testEndOverlay is testing endOverlay()
   * @see org.shotdraw.util.FloatingTextField#endOverlay()
   */
  def testEndOverlay() {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault() {
  }

  private var floatingtextfield: FloatingTextField = null
}

