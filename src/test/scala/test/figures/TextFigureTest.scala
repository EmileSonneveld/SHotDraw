/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	� by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package test.figures

import java.awt.Font
import org.shotdraw.figures.TextFigure
import junit.framework.TestCase

// JUnitDoclet begin import
// JUnitDoclet end import
/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
// JUnitDoclet begin javadoc_class
/**
 * TestCase TextFigureTest is generated by
 * JUnitDoclet to hold the tests for TextFigure.
 * @see org.shotdraw.figures.TextFigure
 */
class TextFigureTest(name: String) extends TestCase(name) {

  /**
   * Factory method for instances of the class to be tested.
   */
  def createInstance: TextFigure = {
    new TextFigure
  }

  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  override protected def setUp() {
    super.setUp
    textfigure = createInstance
  }

  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  override protected def tearDown() {
    textfigure = null
    super.tearDown
  }

  /**
   * Method testMoveBy is testing moveBy
   * @see org.shotdraw.figures.TextFigure#moveBy(int, int)
   */
  def testMoveBy() {
  }

  /**
   * Method testBasicDisplayBox is testing basicDisplayBox
   * @see org.shotdraw.figures.TextFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
   */
  def testBasicDisplayBox() {
  }

  /**
   * Method testDisplayBox is testing displayBox
   * @see org.shotdraw.figures.TextFigure#displayBox()
   */
  def testDisplayBox() {
  }

  /**
   * Method testTextDisplayBox is testing textDisplayBox
   * @see org.shotdraw.figures.TextFigure#textDisplayBox()
   */
  def testTextDisplayBox() {
  }

  /**
   * Method testReadOnly is testing readOnly
   * @see org.shotdraw.figures.TextFigure#readOnly()
   */
  def testReadOnly() {
  }

  /**
   * Method testSetReadOnly is testing setReadOnly
   * @see org.shotdraw.figures.TextFigure#setReadOnly(boolean)
   */
  def testSetReadOnly() {
  }

  /**
   * Method testGetRepresentingFigure is testing getRepresentingFigure
   * @see org.shotdraw.figures.TextFigure#getRepresentingFigure()
   */
  def testGetRepresentingFigure() {
  }

  /**
   * Method testSetGetFont is testing setFont
   * and getFont together by setting some value
   * and verifying it by reading.
   * @see org.shotdraw.figures.TextFigure#setFont(java.awt.Font)
   * @see org.shotdraw.figures.TextFigure#getFont()
   */
  def testSetGetFont() {         
    val tests = List(new Font("Helvetica", Font.PLAIN, 12), null)
    tests foreach { e => 
      textfigure.setFont(e)
      assert(e == textfigure.getFont)  
    }
  }

  /**
   * Method testChanged is testing changed()
   * @see org.shotdraw.figures.TextFigure#changed()
   */
  def testChanged() {
  }

  /**
   * Method testGetAttribute is testing getAttribute
   * @see org.shotdraw.figures.TextFigure#getAttribute(java.lang.String)
   */
  def testGetAttribute() {
  }

  /**
   * Method testSetAttribute is testing setAttribute
   * @see org.shotdraw.figures.TextFigure#setAttribute(java.lang.String, java.lang.Object)
   */
  def testSetAttribute() {
  }

  /**
   * Method testSetGetText is testing setText
   * and getText together by setting some value
   * and verifying it by reading.
   * @see org.shotdraw.figures.TextFigure#setText(java.lang.String)
   * @see org.shotdraw.figures.TextFigure#getText()
   */
  def testSetGetText() {
    val tests = List("", " ", "a", "A", "�", "�", "0123456789", "012345678901234567890", "\n", null)
    tests foreach { e => 
      textfigure.setText(e)
      assert(e == textfigure.getText)  
    }
  }

  /**
   * Method testAcceptsTyping is testing acceptsTyping
   * @see org.shotdraw.figures.TextFigure#acceptsTyping()
   */
  def testAcceptsTyping() {
  }

  /**
   * Method testDrawBackground is testing drawBackground
   * @see org.shotdraw.figures.TextFigure#drawBackground(java.awt.Graphics)
   */
  def testDrawBackground() {
  }

  /**
   * Method testDrawFrame is testing drawFrame
   * @see org.shotdraw.figures.TextFigure#drawFrame(java.awt.Graphics)
   */
  def testDrawFrame() {
  }

  /**
   * Method testOverlayColumns is testing overlayColumns
   * @see org.shotdraw.figures.TextFigure#overlayColumns()
   */
  def testOverlayColumns() {
  }

  /**
   * Method testHandles is testing handles
   * @see org.shotdraw.figures.TextFigure#handles()
   */
  def testHandles() {
  }

  /**
   * Method testWrite is testing write
   * @see org.shotdraw.figures.TextFigure#write(org.shotdraw.util.StorableOutput)
   */
  def testWrite() {
  }

  /**
   * Method testRead is testing read
   * @see org.shotdraw.figures.TextFigure#read(org.shotdraw.util.StorableInput)
   */
  def testRead() {
  }

  /**
   * Method testConnect is testing connect
   * @see org.shotdraw.figures.TextFigure#connect(org.shotdraw.framework.Figure)
   */
  def testConnect() {
  }

  /**
   * Method testFigureChanged is testing figureChanged
   * @see org.shotdraw.figures.TextFigure#figureChanged(org.shotdraw.framework.FigureChangeEvent)
   */
  def testFigureChanged() {
  }

  /**
   * Method testFigureRemoved is testing figureRemoved
   * @see org.shotdraw.figures.TextFigure#figureRemoved(org.shotdraw.framework.FigureChangeEvent)
   */
  def testFigureRemoved() {
  }

  /**
   * Method testFigureRequestRemove is testing figureRequestRemove
   * @see org.shotdraw.figures.TextFigure#figureRequestRemove(org.shotdraw.framework.FigureChangeEvent)
   */
  def testFigureRequestRemove() {
  }

  /**
   * Method testFigureInvalidated is testing figureInvalidated
   * @see org.shotdraw.figures.TextFigure#figureInvalidated(org.shotdraw.framework.FigureChangeEvent)
   */
  def testFigureInvalidated() {
  }

  /**
   * Method testFigureRequestUpdate is testing figureRequestUpdate
   * @see org.shotdraw.figures.TextFigure#figureRequestUpdate(org.shotdraw.framework.FigureChangeEvent)
   */
  def testFigureRequestUpdate() {
  }

  /**
   * Method testRelease is testing release()
   * @see org.shotdraw.figures.TextFigure#release()
   */
  def testRelease() {
  }

  /**
   * Method testDisconnect is testing disconnect()
   * @see org.shotdraw.figures.TextFigure#disconnect(org.shotdraw.framework.Figure)
   */
  def testDisconnect() {
  }

  /**
   * Method testGetTextHolder is testing getTextHolder
   * @see org.shotdraw.figures.TextFigure#getTextHolder()
   */
  def testGetTextHolder() {
  }

  /**
   * Method testCreateCurrentFont is testing createCurrentFont
   * @see org.shotdraw.figures.TextFigure#createCurrentFont()
   */
  def testCreateCurrentFont() {
  }

  /**
   * Method testSetCurrentFontName is testing setCurrentFontName
   * @see org.shotdraw.figures.TextFigure#setCurrentFontName(java.lang.String)
   */
  def testSetCurrentFontName() {
  }

  /**
   * Method testSetCurrentFontSize is testing setCurrentFontSize
   * @see org.shotdraw.figures.TextFigure#setCurrentFontSize(int)
   */
  def testSetCurrentFontSize() {
  }

  /**
   * Method testSetCurrentFontStyle is testing setCurrentFontStyle
   * @see org.shotdraw.figures.TextFigure#setCurrentFontStyle(int)
   */
  def testSetCurrentFontStyle() {
  }

  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  def testVault() {
  }

  private var textfigure: TextFigure = null
}

